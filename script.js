// ===== BI·∫æN TO√ÄN C·ª§C =====
let currentDialogueIndex = 0;
let currentMusicQuestion = 1;
let totalMusicQuestions = 5;
let currentFinalQuestion = 1;
let totalFinalQuestions = 3;
let heartsInterval;
let imagesInterval;
let stickersInterval;
let endingTimeout;
let dialogueTimeout;

// Danh s√°ch h√¨nh ·∫£nh cho c√¢u h·ªèi (b·∫°n c√≥ th·ªÉ thay ƒë·ªïi ƒë∆∞·ªùng d·∫´n ·∫£nh)
const questionImages = [
    'images/ques1.jpg',
    'images/ques2.jpg', 
    'images/ques3.jpg',
    'images/ques4.jpg',
    'images/ques5.jpg'
];

// Danh s√°ch h√¨nh ·∫£nh cho ph·∫ßn l·ªùi ch√∫c cu·ªëi (s·ª≠ d·ª•ng ·∫£nh t·ª´ th∆∞ m·ª•c anhdep)
let wishImages = [
    'images/anhdep/z7135987216423_dc4a4a97c892262b3a5540acee76c79c.jpg',
    'images/anhdep/z7135987230778_2488cf034e34e5f0498bc82e25d11bc0.jpg',
    'images/anhdep/z7135987238212_3beeaf591085ef2914b47a655774b44f.jpg',
    'images/anhdep/z7135987246274_62d41f2198dca778b154ba4c41ef2de5.jpg',
    'images/anhdep/z7135987260411_00ab7ad522bb81d74f4a3343994a573f.jpg',
    'images/anhdep/z7135987279279_bf15b9d5e6433bf8f38031306437a12e.jpg',
    'images/anhdep/z7135987294610_27560c38fc847fa15da7d4d506bdf2b1.jpg',
    'images/anhdep/z7135987304672_d73514e592b785fff4d214b81fc1f3ce.jpg',
    'images/anhdep/z7135987323396_bda922853f87044041aa81d7b2252775.jpg',
    'images/anhdep/z7135987338441_18ed658470f0531b20110c3c4c837e82.jpg',
    'images/anhdep/z7135987357064_eea6f60fbe2c30c27a09752cd9531171.jpg',
    'images/anhdep/anhdep1.png',
    'images/anhdep/anhdep2.png',
    'images/anhdep/anhdep3.png',
    'images/anhdep/anhdep4.png',
    'images/anhdep/anhdep5.png',
    'images/anhdep/anhdep6.png',
    'images/anhdep/anhdep7.png',
    'images/anhdep/anhdep8.png'
];

// X√°o tr·ªôn m·∫£ng ·∫£nh ƒë·ªÉ hi·ªÉn th·ªã ng·∫´u nhi√™n m·ªói l·∫ßn t·∫£i trang (Fisher‚ÄìYates)
function shuffleArray(arr) {
    for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
    }
    return arr;
}

wishImages = shuffleArray(wishImages);

// Danh s√°ch h·ªôi tho·∫°i v·ªõi ph·∫£n h·ªìi
const dialogues = [
    {
        text: "Xin ch√†o B·∫°n",
        needsResponse: true,
        responses: [
            { text: "Xin ch√†o!", reply: "Ch√†o b·∫°n! R·∫•t vui ƒë∆∞·ª£c g·∫∑p!" },
            { text: "R·∫•t vui ƒë∆∞·ª£c g·∫∑p!", reply: "M√¨nh c≈©ng vui l·∫Øm!" },
            { text: "B·∫°n l√† ai v·∫≠y?", reply: "M√¨nh s·∫Ω gi·ªõi thi·ªáu ngay!" }
        ]
    },
    {
        text: "Mu·ªën bi·∫øt th√¨ b·∫•m next ikkkkk  ?",
        needsResponse: false
    },
    {
        text: "Xin t·ª± gi·ªõi thi·ªáu m√¨nh l√† M√≠t T·ªù N√°ii",
        needsResponse: true,
        responses: [
            { text: "T√™n hay qu√°!", reply: "C·∫£m ∆°n b·∫°n! M√¨nh th√≠ch t√™n n√†y l·∫Øm!" },
            { text: "D·ªÖ th∆∞∆°ng qu√°!", reply: "Hehe, b·∫°n c≈©ng d·ªÖ th∆∞∆°ng l·∫Øm!" },
            { text: "L·∫° qu√°!", reply: "L·∫° m√† th√∫ v·ªã ƒë√∫ng kh√¥ng?" }
        ]
    },
    {
        text: "H√¥m nay s·∫Ω c√≥ 1 m√≥n qu√† d√†nh cho b·∫°n",
        needsResponse: true,
        responses: [
            { text: "Th·∫≠t kh√¥ng?", reply: "Th·∫≠t 100%! Nh∆∞ng ph·∫£i v∆∞·ª£t qua th·ª≠ th√°ch tr∆∞·ªõc!" },
            { text: "Qu√† g√¨ v·∫≠y?", reply: "B√≠ m·∫≠t! Ho√†n th√†nh th·ª≠ th√°ch s·∫Ω bi·∫øt!" },
            { text: "Tuy·ªát qu√°!", reply: "M√¨nh c≈©ng nghƒ© v·∫≠y!" }
        ]
    },
    {
        text: "B·∫°n ph·∫£i c·ªë g·∫Øng v∆∞·ª£t qua c√°c th·ª≠ th√°ch ki·ªÉm tra ƒë·∫∑c bi·ªát c·ªßa m√¨nh ƒë·ªÉ nh·∫≠n ƒë∆∞·ª£c m√≥n qu√† ƒë√≥ nh√©",
        needsResponse: false
    },
    {
        text: "N·∫øu kh√¥ng v∆∞·ª£t qua th√¨ b·∫°n s·∫Ω b·ªã m√¨nh ƒë√° ƒë√≠tt v√† s·∫Ω b·ªã c·∫Øt ti·ªÅn tr√† s·ªØa 3 th√°ng",
        needsResponse: true,
        responses: [
            { text: "S·ª£ qu√°!", reply: "ƒê·ª´ng s·ª£, m√¨nh ch·ªâ ƒë√πa th√¥i! Nh∆∞ng h√£y c·ªë g·∫Øng nh√©!" },
            { text: "Kh√¥ng sao!", reply: "Tinh th·∫ßn t·ªët! M√¨nh tin b·∫°n s·∫Ω l√†m ƒë∆∞·ª£c!" },
            { text: "Th·ª≠ th√°ch g√¨ v·∫≠y?", reply: "B√≠ m·∫≠t! R·∫•t th√∫ v·ªã ƒë·∫•y!" }
        ]
    },
    {
        text: "N√≥i chuy·ªán vui gh√™ ha! Gi·ªù th√¨ ƒë·∫øn ph·∫ßn th√∫ v·ªã n√® b·∫•m Next ikkikk ‚ú®",
        needsResponse: false
    },
    {
        text: "B·∫°n h√£y ch·ªçn 1 nh√¢n v·∫≠t mang l·∫°i s·ª± may m·∫Øn cho b·∫°n nh√©!",
        needsResponse: false
    }
];

// Danh s√°ch c√¢u h·ªèi √¢m nh·∫°c (B·∫†N C·∫¶N CH·ªàNH S·ª¨A T·∫†I ƒê√ÇY)
const musicQuestions = [
    {
        question: "C√¢u h·ªèi ƒë·∫ßu ti√™n ƒë∆°n gi·∫£n hoii t·∫•m h√¨nh n√†y ƒë∆∞·ª£c ch·ª•p v√†o d·ªãp n√†o ?",
        image: "images/ques1.jpg", // B·∫†N C·∫¶N TH√äM ·∫¢NH V√ÄO
        options: [
            { text: "Ng√†y 26 th√°ng 10 nƒÉm 2023", correct: false },
            { text: "Ng√†y 13 th√°ng 2 nƒÉm 2023", correct: true },
            { text: "Ng√†y 26 th√°ng 10 nƒÉm 2024", correct: false },
            { text: "Ng√†y 14 th√°ng 2 nƒÉm 2024", correct: false }
        ]
    },
    {
        question: "M√≥n ƒë·ªì n√†o kh√¥ng n·∫±m trong H·ªôp qu√† ƒë∆∞·ª£c nh·∫≠n v√†o sinh nh·∫≠t nƒÉm ngo√°i c·ªßa b·∫°n?",
        image: "images/ques2.jpg", // B·∫†N C·∫¶N TH√äM ·∫¢NH V√ÄO
        options: [
            { text: "M√≥c kh√≥a con h·ªï", correct: false },
            { text: "V√≤ng tay b·∫°c c√≥ th·ªÉ xem ƒë∆∞·ª£c h√¨nh ·∫£nh", correct: true },
            { text: "M√¥ h√¨nh Chibi", correct: false },
            { text: "S√°p th∆°m", correct: false }
        ]
    },
    {
        question: "M√≥n qu√† l·∫ßn ƒë·∫ßu ti√™n v√†o s√†i g√≤n b·∫°n ƒë∆∞·ª£c nh·∫≠n t·ª´ T≈©n l√† g√¨?",
        image: "images/ques3.jpg", // B·∫†N C·∫¶N TH√äM ·∫¢NH V√ÄO
        options: [
            { text: "Ch√≥ B√¥ng T≈©m T≈©m", correct: true },
            { text: "√Åo Levent m√†u h·ªìng", correct: false },
            { text: "V√≤ng tay b·∫°c", correct: false },
            { text: "Chu·ªôt logistic", correct: false }
        ]
    },
    {
        question: "20/10/2024 b·∫°n ƒë√£ ƒëi ƒë√¢u v·ªõi T≈©n ?",
        image: "images/ques4.jpg", // B·∫†N C·∫¶N TH√äM ·∫¢NH V√ÄO
        options: [
            { text: "ƒêi ƒÉn ƒë·ªì √¢uu√¢uu", correct: false },
            { text: "ƒêi ƒÉn jolibeee", correct: true },
            { text: "ƒêi ƒÉn buffer", correct: false },
            { text: "ƒêi √∫n c√† heeeheee", correct: false }
        ]
    },
    {
        question: "Ph·∫ßn b√°nh nh·∫≠n ƒë∆∞·ª£c 20/10/2024 c√≥ m·∫•y v·ªã taaa",
        image: "images/ques5.jpg", // B·∫†N C·∫¶N TH√äM ·∫¢NH V√ÄO
        options: [
            { text: "6", correct: false },
            { text: "3 v·ªã", correct: false },
            { text: "5 v·ªã", correct: false },
            { text: "4 v·ªã", correct: true }
        ]
    }
];

// ===== KH·ªûI T·∫†O TRANG WEB =====
document.addEventListener('DOMContentLoaded', function() {
    console.log('Trang web ƒë√£ s·∫µn s√†ng! üê∑üíñ');
    
    // B·∫Øt ƒë·∫ßu hi·ªáu ·ª©ng tr√°i tim bay
    startHeartAnimation();
    
    // Kh·ªüi t·∫°o s·ª± ki·ªán
    initializeEvents();
    
    // B·∫Øt ƒë·∫ßu ph·∫ßn gi·ªõi thi·ªáu
    startIntroSequence();
    
    // Th√™m event listener cho c√°c n√∫t
    setTimeout(() => {
        const nextBtn = document.getElementById('next-dialogue');
        const testBtn = document.getElementById('test-btn');
        
        console.log('Next button found:', nextBtn);
        console.log('Test button found:', testBtn);
        
        if (nextBtn) {
            console.log('Next button style:', nextBtn.style.cssText);
            console.log('Next button disabled:', nextBtn.disabled);
            console.log('Next button visible:', nextBtn.offsetWidth > 0 && nextBtn.offsetHeight > 0);
            
            // Th√™m event listener tr·ª±c ti·∫øp
            nextBtn.onclick = function(e) {
                e.preventDefault();
                tryStartMusicOnce();
                tryStartYouTubeOnce();
                console.log('Next button clicked!');
                nextDialogue();
            };
        }
        
        // Th√™m event cho n√∫t TEST
        if (testBtn) {
            testBtn.onclick = function() {
                console.log('TEST button clicked!');
                nextDialogue();
            };
        }
    }, 1000);
});

// ===== PH·∫¶N 1: GI·ªöI THI·ªÜU =====

function startIntroSequence() {
    console.log('Starting intro sequence...');
    
    // Kh·ªüi t·∫°o h·ªôi tho·∫°i ƒë·∫ßu ti√™n
    showCurrentDialogue();
    
    // Kh√¥ng t·ª± ƒë·ªông chuy·ªÉn c√¢u, ch·ªâ khi ng∆∞·ªùi ch∆°i b·∫•m Next
}

function showCurrentDialogue() {
    const dialogueText = document.getElementById('dialogue-text');
    const nextBtn = document.getElementById('next-dialogue');
    const playerResponse = document.getElementById('player-response');
    
    if (dialogueText) {
        const currentDialogue = dialogues[currentDialogueIndex];
        
        // Hi·ªÉn th·ªã c√¢u h·ªôi tho·∫°i hi·ªán t·∫°i
        dialogueText.textContent = currentDialogue.text;
        
        // ·∫®n ph·∫ßn ph·∫£n h·ªìi ban ƒë·∫ßu
        if (playerResponse) {
            playerResponse.classList.add('hidden');
        }
        
        // C·∫≠p nh·∫≠t n√∫t Next
        if (nextBtn) {
            if (currentDialogueIndex === dialogues.length - 1) {
                nextBtn.textContent = 'B·∫Øt ƒë·∫ßu ‚Üí';
                nextBtn.style.background = 'linear-gradient(45deg, #4CAF50, #66BB6A)';
            } else {
                nextBtn.textContent = 'Next ‚Üí';
                nextBtn.style.background = 'linear-gradient(45deg, #ff6b9d, #ff8fab)';
            }
        }
        
        // N·∫øu c·∫ßn ph·∫£n h·ªìi, hi·ªÉn th·ªã options
        if (currentDialogue.needsResponse) {
            showResponseOptions(currentDialogue.responses);
        }
    }
}

function showResponseOptions(responses) {
    const playerResponse = document.getElementById('player-response');
    const responseOptions = playerResponse.querySelector('.response-options');
    const playerText = playerResponse.querySelector('#player-text');
    
    if (playerResponse && responseOptions && playerText) {
        // Hi·ªÉn th·ªã ph·∫ßn ph·∫£n h·ªìi
        playerResponse.classList.remove('hidden');
        
        // X√≥a options c≈©
        responseOptions.innerHTML = '';
        
        // T·∫°o options m·ªõi
        responses.forEach((response, index) => {
            const button = document.createElement('button');
            button.className = 'response-btn';
            button.textContent = response.text;
            button.dataset.reply = response.reply;
            button.dataset.index = index;
            
            button.addEventListener('click', function() {
                handlePlayerResponse(this, response.reply);
            });
            
            responseOptions.appendChild(button);
        });
        
        playerText.textContent = 'T√¥i ch·ªçn: ';
    }
}

function handlePlayerResponse(button, reply) {
    // ƒê√°nh d·∫•u button ƒë∆∞·ª£c ch·ªçn
    const allButtons = document.querySelectorAll('.response-btn');
    allButtons.forEach(btn => btn.classList.remove('selected'));
    button.classList.add('selected');
    
    // Hi·ªÉn th·ªã ph·∫£n h·ªìi c·ªßa ng∆∞·ªùi ch∆°i
    const playerText = document.getElementById('player-text');
    if (playerText) {
        playerText.textContent = 'T√¥i ch·ªçn: ' + button.textContent;
    }
    
    // Sau 1 gi√¢y, hi·ªÉn th·ªã ph·∫£n h·ªìi c·ªßa T≈©n
    setTimeout(() => {
        const dialogueText = document.getElementById('dialogue-text');
        if (dialogueText) {
            dialogueText.textContent = reply;
        }
        
        // ·∫®n ph·∫ßn ph·∫£n h·ªìi
        const playerResponse = document.getElementById('player-response');
        if (playerResponse) {
            playerResponse.classList.add('hidden');
        }
        
        // Chuy·ªÉn sang c√¢u ti·∫øp theo sau 2 gi√¢y
        setTimeout(() => {
            nextDialogue();
        }, 2000);
    }, 1000);
}

function nextDialogue() {
    console.log('nextDialogue called, current index:', currentDialogueIndex);
    console.log('Total dialogues:', dialogues.length);
    
    // X√≥a timeout t·ª± ƒë·ªông n·∫øu c√≥
    if (dialogueTimeout) {
        clearTimeout(dialogueTimeout);
    }
    
    if (currentDialogueIndex < dialogues.length - 1) {
        currentDialogueIndex++;
        console.log('Moving to next dialogue, new index:', currentDialogueIndex);
        showCurrentDialogue();
    } else {
        // ·ªû c√¢u cu·ªëi c√πng: hi·ªÉn th·ªã l·ª±a ch·ªçn nh√¢n v·∫≠t khi b·∫•m "B·∫Øt ƒë·∫ßu"
        console.log('Reached end of dialogues ‚Üí show character selection');
        showCharacterSelection();
    }
}

function startAutoNext() {
    // X√≥a timeout c≈© n·∫øu c√≥
    if (dialogueTimeout) {
        clearTimeout(dialogueTimeout);
    }
    
    // T·ª± ƒë·ªông chuy·ªÉn c√¢u sau 5 gi√¢y
    dialogueTimeout = setTimeout(() => {
        if (currentDialogueIndex < dialogues.length - 1) {
            nextDialogue();
        }
    }, 5000);
}

function showCharacterSelection() {
    console.log('showCharacterSelection called');
    const characterSelection = document.getElementById('character-selection');
    console.log('character-selection element:', characterSelection);
    
    if (characterSelection) {
        console.log('Before removing hidden class:', characterSelection.classList.contains('hidden'));
        characterSelection.classList.remove('hidden');
        console.log('After removing hidden class:', characterSelection.classList.contains('hidden'));
        
        // Force hi·ªÉn th·ªã v·ªõi !important
        characterSelection.style.setProperty('display', 'block', 'important');
        characterSelection.style.setProperty('visibility', 'visible', 'important');
        characterSelection.style.setProperty('opacity', '1', 'important');
        characterSelection.style.setProperty('z-index', '999', 'important');
        characterSelection.style.animation = 'slideInUp 0.8s ease-out';
        
        console.log('Character selection styles applied:', {
            display: characterSelection.style.display,
            visibility: characterSelection.style.visibility,
            opacity: characterSelection.style.opacity,
            zIndex: characterSelection.style.zIndex
        });
        
        // ·∫®n v√πng ƒëi·ªÅu khi·ªÉn h·ªôi tho·∫°i ƒë·ªÉ tr√°nh nh·∫ßm l·∫´n
        const dialogueControls = document.querySelector('.dialogue-controls');
        const playerResponse = document.getElementById('player-response');
        const currentDialogue = document.getElementById('current-dialogue');
        
        if (dialogueControls) {
            dialogueControls.classList.add('hidden');
        }
        if (playerResponse) {
            playerResponse.classList.add('hidden');
        }
        if (currentDialogue) {
            currentDialogue.style.opacity = '0.8';
        }
        
        // Cu·ªôn t·ªõi ph·∫ßn l·ª±a ch·ªçn nh√¢n v·∫≠t
        setTimeout(() => {
            characterSelection.scrollIntoView({ behavior: 'smooth', block: 'center' });
        }, 200);
    } else {
        console.error('character-selection element not found!');
    }
}

function initializeEvents() {
    // S·ª± ki·ªán l·ª±a ch·ªçn nh√¢n v·∫≠t
    const characterCards = document.querySelectorAll('.character-card');
    characterCards.forEach(card => {
        card.addEventListener('click', function() {
            handleCharacterSelection(this);
        });
    });
    
    // S·ª± ki·ªán c√¢u h·ªèi cu·ªëi
    initializeFinalQuestions();
}

function handleCharacterSelection(selectedCard) {
    const allCards = document.querySelectorAll('.character-card');
    
    // Hi·ªáu ·ª©ng b·∫•t ng·ªù - lu√¥n ch·ªçn Kim Min T≈©n
    console.log('User clicked:', selectedCard.getAttribute('data-character'));
    
    // ·∫®n t·∫•t c·∫£ card
    allCards.forEach(card => {
        card.style.opacity = '0.3';
        card.style.transform = 'scale(0.9)';
    });
    
    // Hi·ªáu ·ª©ng ƒë·∫∑c bi·ªát cho Kim Min T≈©n (b·∫•t k·ªÉ click g√¨)
    const kimMinTunCard = document.querySelector('[data-character="kim-min-tun"]');
    if (kimMinTunCard) {
        kimMinTunCard.style.opacity = '1';
        kimMinTunCard.style.transform = 'scale(1.2)';
        kimMinTunCard.classList.add('selected');
        
        // Hi·ªáu ·ª©ng tr√°i tim bay
        createHeartEffect(kimMinTunCard);
        
        // Th√¥ng b√°o b·∫•t ng·ªù
        setTimeout(() => {
            showNotification('B·∫•t ng·ªù ch∆∞a! Kim Min T≈©n ƒë√£ ƒë∆∞·ª£c b·∫°n ch·ªçn ch·∫Øc anh ·∫•y tuy·ªát d·ªùi l·∫Ømmm! üéâüíñ');
        }, 1000);
        
        // Chuy·ªÉn sang ph·∫ßn √¢m nh·∫°c sau 3 gi√¢y v·ªõi hi·ªáu ·ª©ng m∆∞·ª£t m√†
        setTimeout(() => {
            // ·∫®n character selection v·ªõi hi·ªáu ·ª©ng fade out
            const characterSelection = document.getElementById('character-selection');
            if (characterSelection) {
                characterSelection.style.transition = 'all 0.8s ease-out';
                characterSelection.style.opacity = '0';
                characterSelection.style.transform = 'translateY(50px)';
                
                setTimeout(() => {
                    characterSelection.classList.add('hidden');
                    switchToMusicQuiz();
                }, 800);
            } else {
                switchToMusicQuiz();
            }
        }, 3000);
    }
}

// ===== PH·∫¶N 2: TR√í CH∆†I √ÇM NH·∫†C =====

function switchToMusicQuiz() {
    const introSection = document.getElementById('intro-section');
    const musicQuizSection = document.getElementById('music-quiz-section');
    const characterSelection = document.getElementById('character-selection');
    
    if (introSection && musicQuizSection) {
        introSection.classList.remove('active');
        musicQuizSection.classList.add('active');
        
        // ·∫®n character selection
        if (characterSelection) {
            characterSelection.classList.add('hidden');
        }
        
        // T·∫°o c√¢u h·ªèi √¢m nh·∫°c ƒë·∫ßu ti√™n
        createMusicQuestion();
    }
}

function createMusicQuestion() {
    const container = document.getElementById('music-quiz-container');
    if (!container || currentMusicQuestion > totalMusicQuestions) {
        switchToCongratulations();
        return;
    }
    
    const questionData = musicQuestions[currentMusicQuestion - 1];
    
    // C√¢u h·ªèi 4 v√† 5 ·∫©n h√¨nh ·∫£nh ban ƒë·∫ßu
    const shouldHideImage = currentMusicQuestion === 4 || currentMusicQuestion === 5;
    
    container.innerHTML = `
        <div class="music-question">
            <h2>C√¢u ${currentMusicQuestion}: ${questionData.question}</h2>
            <img src="${questionData.image}" alt="H√¨nh ·∫£nh c√¢u h·ªèi" 
                 style="${shouldHideImage ? 'display: none;' : ''}" 
                 onerror="this.style.display='none'">
            <div class="music-options">
                ${questionData.options.map((option, index) => `
                    <button class="music-option-btn" data-correct="${option.correct}">
                        ${option.text}
                    </button>
                `).join('')}
            </div>
        </div>
    `;
    
    // Th√™m s·ª± ki·ªán cho c√°c n√∫t
    const optionButtons = container.querySelectorAll('.music-option-btn');
    optionButtons.forEach(button => {
        button.addEventListener('click', function() {
            handleMusicAnswer(this);
        });
    });
}

function handleMusicAnswer(button) {
    const isCorrect = button.dataset.correct === 'true';
    
    if (isCorrect) {
        button.classList.add('correct');
        createHeartEffect(button);
        showNotification('ƒê√∫ng r·ªìi! Ai m√† gi·ªèi d taaa üíñ');
        
        // Hi·ªÉn th·ªã h√¨nh ·∫£nh cho c√¢u 4 v√† 5 khi tr·∫£ l·ªùi ƒë√∫ng
        if (currentMusicQuestion === 4 || currentMusicQuestion === 5) {
            const questionImg = document.querySelector('.music-question img');
            if (questionImg) {
                questionImg.style.display = 'block';
                questionImg.style.width = '100%';
                questionImg.style.maxWidth = '600px';
                questionImg.style.maxHeight = '400px';
                questionImg.style.height = 'auto';
                questionImg.style.objectFit = 'contain';
                questionImg.style.margin = '20px auto';
                questionImg.style.borderRadius = '15px';
                questionImg.style.boxShadow = '0 15px 40px rgba(0, 0, 0, 0.3)';
                questionImg.style.animation = 'slideInUp 0.8s ease-out';
                questionImg.style.backgroundColor = 'rgba(255, 255, 255, 0.9)';
                questionImg.style.padding = '10px';
                showNotification('Ai m√† gi·ªèiii d·ªã tr·ªùiii! üéâ');
            }
        }
        
        setTimeout(() => {
            currentMusicQuestion++;
            createMusicQuestion();
        }, 2000); // TƒÉng th·ªùi gian ƒë·ªÉ ng∆∞·ªùi ch∆°i xem h√¨nh ·∫£nh
    } else {
        button.classList.add('wrong');
        showNotification('Sai g√≤iii ch·ªçn l·∫°i ik ƒë√° ƒë√≠t gi·ªù üò§üíï');
        
        setTimeout(() => {
            button.classList.remove('wrong');
        }, 1000);
    }
}

// ===== PH·∫¶N 3: CH√öC M·ª™NG =====

function switchToCongratulations() {
    const musicQuizSection = document.getElementById('music-quiz-section');
    const congratulationsSection = document.getElementById('congratulations-section');
    
    if (musicQuizSection && congratulationsSection) {
        musicQuizSection.classList.remove('active');
        congratulationsSection.classList.add('active');
        
        // B·∫Øt ƒë·∫ßu hi·ªáu ·ª©ng ch√∫c m·ª´ng
        startCongratulationsEffect();
    }
}

function startCongratulationsEffect() {
    // T·∫°o nhi·ªÅu tr√°i tim bay v·ªõi hi·ªáu ·ª©ng m·∫°nh h∆°n
    for (let i = 0; i < 25; i++) {
        setTimeout(() => {
            createHeartEffect(document.querySelector('.mascot-final'));
        }, i * 150);
    }
    
    // T·∫°o th√™m tr√°i tim bay li√™n t·ª•c
    const congratulationsHearts = setInterval(() => {
        createFloatingHeart(document.getElementById('floating-hearts'));
    }, 300);
    
    // D·ª´ng hi·ªáu ·ª©ng sau 10 gi√¢y
    setTimeout(() => {
        clearInterval(congratulationsHearts);
    }, 10000);
    
    // Hi·ªÉn th·ªã th√¥ng b√°o ch√∫c m·ª´ng
    setTimeout(() => {
        showNotification('Ch√∫c m·ª´ng! B·∫°n ƒë√£ v∆∞·ª£t qua t·∫•t c·∫£ th·ª≠ th√°ch! üéâüíñ');
    }, 2000);
}

function startFinalQuestions() {
    const finalQuestions = document.getElementById('final-questions');
    if (finalQuestions) {
        finalQuestions.style.display = 'block';
        finalQuestions.style.animation = 'slideInUp 0.8s ease-out';
    }
}

// ===== PH·∫¶N 4: C√ÇU H·ªéI CU·ªêI =====

function initializeFinalQuestions() {
    const finalButtons = document.querySelectorAll('#final-questions .option-btn');
    finalButtons.forEach(button => {
        button.addEventListener('click', function() {
            handleFinalAnswer(this);
        });
    });
}

function handleFinalAnswer(button) {
    const isCorrect = button.dataset.answer === 'correct';
    const isSpecialButton = button.id === 'final-button' || button.classList.contains('special-btn');
    
    // N√∫t ƒë·∫∑c bi·ªát lu√¥n chuy·ªÉn sang ph·∫ßn ti·∫øp theo
    if (isSpecialButton) {
        button.classList.add('correct');
        createHeartEffect(button);
        
        // Chuy·ªÉn sang ph·∫ßn l·ªùi ch√∫c cu·ªëi ngay l·∫≠p t·ª©c
        setTimeout(() => {
            switchToFinalWish();
        }, 1000);
        return;
    }
    
    if (isCorrect) {
        button.classList.add('correct');
        createHeartEffect(button);
        showNotification('ƒê√∫ng r·ªìi! Ai m√† gi·ªèi d taaa üíñ');
        
        setTimeout(() => {
            nextFinalQuestion();
        }, 1500);
    } else {
        button.classList.add('wrong');
        showNotification('Sai g√≤iii ch·ªçn l·∫°i ik ƒë√° ƒë√≠t gi·ªù üò§üíï');
        
        setTimeout(() => {
            button.classList.remove('wrong');
        }, 1000);
    }
}

function nextFinalQuestion() {
    const currentQ = document.getElementById(`final-question-${currentFinalQuestion}`);
    if (currentQ) {
        currentQ.classList.add('hidden');
    }
    
    currentFinalQuestion++;
    
    if (currentFinalQuestion <= totalFinalQuestions) {
        const nextQ = document.getElementById(`final-question-${currentFinalQuestion}`);
        if (nextQ) {
            nextQ.classList.remove('hidden');
            nextQ.style.animation = 'slideInUp 0.8s ease-out';
        }
    } else {
        // Chuy·ªÉn sang ph·∫ßn l·ªùi ch√∫c cu·ªëi
        setTimeout(() => {
            switchToFinalWish();
        }, 2000);
    }
}

function switchToFinalWish() {
    const congratulationsSection = document.getElementById('congratulations-section');
    const finalWishSection = document.getElementById('final-wish-section');
    
    if (congratulationsSection && finalWishSection) {
        congratulationsSection.classList.remove('active');
        finalWishSection.classList.add('active');
        
        // B·∫Øt ƒë·∫ßu hi·ªáu ·ª©ng l·ªùi ch√∫c cu·ªëi
        startFinalWishSection();
    }
}

// ===== PH·∫¶N 5: L·ªúI CH√öC CU·ªêI =====

function startFinalWishSection() {
    console.log('B·∫Øt ƒë·∫ßu ph·∫ßn l·ªùi ch√∫c cu·ªëi! üíñ');
    
    // Hi·ªáu ·ª©ng typing cho text xong m·ªõi b·∫Øt ƒë·∫ßu hi·ªÉn th·ªã ·∫£nh
    startTypingEffect(() => {
        startImageSlideshow();
        // TƒÉng c∆∞·ªùng hi·ªáu ·ª©ng tr√°i tim bay
        startFloatingHearts();
        // Th√™m c√°c l·ªõp overlay d·ªÖ th∆∞∆°ng
        createCuteOverlays();
    });
}

function startTypingEffect(onDone) {
    const typingText = document.getElementById('typing-text');
    const text = typingText.textContent;
    typingText.textContent = '';
    
    let i = 0;
    const typeInterval = setInterval(() => {
        if (i < text.length) {
            typingText.textContent += text.charAt(i);
            i++;
        } else {
            clearInterval(typeInterval);
            if (typeof onDone === 'function') {
                // Nh·ªè delay ƒë·ªÉ ch·∫Øc ch·∫Øn DOM c·∫≠p nh·∫≠t xong
                setTimeout(onDone, 200);
            }
        }
    }, 100);
}

function createSparkleEffect(element) {
    const sparkle = document.createElement('div');
    sparkle.style.position = 'absolute';
    sparkle.style.width = '20px';
    sparkle.style.height = '20px';
    sparkle.style.background = 'radial-gradient(circle, #fff, #ff69b4)';
    sparkle.style.borderRadius = '50%';
    sparkle.style.pointerEvents = 'none';
    sparkle.style.zIndex = '100';
    sparkle.style.left = (Math.random() * 200) + 'px';
    sparkle.style.top = (Math.random() * 200) + 'px';
    sparkle.style.animation = 'sparkle 1s ease-out forwards';
    
    element.appendChild(sparkle);
    
    setTimeout(() => {
        sparkle.remove();
    }, 1000);
}

function startImageSlideshow() {
    // Container to√†n m√†n h√¨nh
    let fullscreenContainer = document.getElementById('fullscreen-images');
    if (!fullscreenContainer) {
        fullscreenContainer = document.createElement('div');
        fullscreenContainer.id = 'fullscreen-images';
        fullscreenContainer.style.position = 'fixed';
        fullscreenContainer.style.top = '0';
        fullscreenContainer.style.left = '0';
        fullscreenContainer.style.width = '100vw';
        fullscreenContainer.style.height = '100vh';
        fullscreenContainer.style.pointerEvents = 'none';
        fullscreenContainer.style.zIndex = '1500';
        document.body.appendChild(fullscreenContainer);
    }

    // T·∫°o grid ·∫£o ƒë·ªÉ tr√°nh ƒë√® l√™n nhau
    const gridSize = 5; // 5x5 grid gi√∫p h√¨nh th∆∞a h∆°n
    const cellWidth = 100 / gridSize; // 25vw m·ªói cell
    const cellHeight = 100 / gridSize; // 25vh m·ªói cell
    const usedCells = new Set(); // Track cells ƒë√£ d√πng
    
    let currentImageIndex = 0;
    let visibleImages = [];
    const maxVisible = 4; // T·ªëi ƒëa 4 ·∫£nh c√πng l√∫c
    let totalShown = 0; // t·ªïng s·ªë ·∫£nh ƒë√£ hi·ªÉn th·ªã (ƒë·∫øm theo l·∫ßn xu·∫•t hi·ªán)
    const uniqueCount = Math.min(11, wishImages.length); // ch·ªâ l·∫•y ƒë√∫ng 11 h√¨nh
    const maxShows = uniqueCount * 2; // ch·∫°y ƒë√∫ng 2 v√≤ng

    function getRandomCell() {
        let attempts = 0;
        while (attempts < 20) { // Tr√°nh v√≤ng l·∫∑p v√¥ h·∫°n
            const cellX = Math.floor(Math.random() * gridSize);
            const cellY = Math.floor(Math.random() * gridSize);
            const cellId = `${cellX}-${cellY}`;
            // Tr√°nh ch·ªçn cell k·ªÅ nhau ƒë·ªÉ gi·∫£m ch·ªìng ch√©o (lo·∫°i 8 √¥ xung quanh)
            let neighborUsed = false;
            for (let dx = -1; dx <= 1 && !neighborUsed; dx++) {
                for (let dy = -1; dy <= 1 && !neighborUsed; dy++) {
                    const nx = cellX + dx;
                    const ny = cellY + dy;
                    if (nx < 0 || ny < 0 || nx >= gridSize || ny >= gridSize) continue;
                    const nid = `${nx}-${ny}`;
                    if (usedCells.has(nid)) neighborUsed = true;
                }
            }

            if (!usedCells.has(cellId) && !neighborUsed) {
                usedCells.add(cellId);
                // V√πng an to√†n trong viewport ƒë·ªÉ tr√°nh tr√†n (theo %)
                const minX = 10, maxX = 90;
                const minY = 12, maxY = 88;
                let x = cellX * cellWidth + (Math.random() * 18 + 4); // 4-22% trong cell
                let y = cellY * cellHeight + (Math.random() * 18 + 4);
                x = Math.max(minX, Math.min(maxX, x));
                y = Math.max(minY, Math.min(maxY, y));
                return { x, y, id: cellId };
            }
            attempts++;
        }
        // Fallback: random position n·∫øu kh√¥ng t√¨m ƒë∆∞·ª£c cell tr·ªëng
        const minX = 10, maxX = 90;
        const minY = 12, maxY = 88;
        return {
            x: Math.random() * (maxX - minX) + minX,
            y: Math.random() * (maxY - minY) + minY,
            id: 'fallback'
        };
    }

    function createImageElement() {
        const img = document.createElement('img');
        img.className = 'image-slide';
        img.style.position = 'absolute';
        img.style.opacity = '0';
        img.style.transition = 'all 0.9s cubic-bezier(0.4, 0, 0.2, 1)';
        img.style.maxWidth = '30vw';
        img.style.maxHeight = '30vh';
        img.style.width = 'auto';
        img.style.height = 'auto';
        img.style.objectFit = 'contain';
        img.style.borderRadius = '20px';
        img.style.boxShadow = '0 15px 40px rgba(0,0,0,0.4)';
        img.style.zIndex = '1';
        img.style.pointerEvents = 'auto';
        img.style.cursor = 'pointer';
        
        // Click effect
        img.addEventListener('click', function() {
            this.style.animation = 'none';
            setTimeout(() => {
                this.style.animation = 'imageFloat 4s ease-in-out infinite';
            }, 10);
            createSparkleEffect(this);
        });
        
        return img;
    }

    function showImage() {
        if (totalShown >= maxShows) {
            // D·ª´ng ph√°t sinh th√™m, chuy·ªÉn sang layout tƒ©nh r·ªìi banner
            finalizeStaticGrid();
            return;
        }

        const img = createImageElement();
        // ch·ªâ d√πng trong 11 ·∫£nh ƒë·∫ßu, l·∫∑p l·∫°i 2 v√≤ng
        const idx = currentImageIndex % uniqueCount;
        img.src = wishImages[idx];
        
        // L·∫•y v·ªã tr√≠ ng·∫´u nhi√™n trong grid
        const cell = getRandomCell();
        img.style.left = cell.x + '%';
        img.style.top = cell.y + '%';
        
        // G√≥c nghi√™ng nh·∫π
        const rotation = (Math.random() - 0.5) * 16; // -8 ƒë·∫øn +8 ƒë·ªô
        img.style.transform = `translate(-50%, -50%) rotate(${rotation}deg)`;
        img.style.setProperty('--tilt', `${rotation}deg`);
        
        fullscreenContainer.appendChild(img);
        visibleImages.push({ element: img, cellId: cell.id });
        
        // Fade in v·ªõi hi·ªáu ·ª©ng m∆∞·ª£t
        requestAnimationFrame(() => {
            img.style.opacity = '1';
            img.style.filter = 'blur(0px) brightness(1)';
            img.classList.add('active');
        });

        currentImageIndex++;
        totalShown++;
        
        // N·∫øu c√≥ qu√° nhi·ªÅu ·∫£nh, ·∫©n ·∫£nh c≈© nh·∫•t
        if (visibleImages.length > maxVisible) {
            const oldest = visibleImages.shift();
            usedCells.delete(oldest.cellId);
            fadeOutImage(oldest.element);
        }
    }

    function fadeOutImage(img) {
        img.classList.remove('active');
        img.style.transition = 'all 1.1s ease-out';
        img.style.opacity = '0';
        img.style.transform = 'scale(0.8) translate(-50%, -50%) rotate(var(--tilt, 0deg))';
        img.style.filter = 'blur(4px) brightness(0.7)';
        
        setTimeout(() => {
            if (img.parentNode) {
                img.parentNode.removeChild(img);
            }
        }, 1100);
    }

    function finalizeStaticGrid() {
        // Ng·ª´ng interval n·∫øu c√≤n ch·∫°y
        if (imagesInterval) clearInterval(imagesInterval);

        // D·ªçn visible queue d·∫ßn d·∫ßn ƒë·ªÉ tr√°nh gi·∫≠t
        while (visibleImages.length > 0) {
            const oldest = visibleImages.shift();
            usedCells.delete(oldest.cellId);
            fadeOutImage(oldest.element);
        }

        // T·∫°o layout tƒ©nh 11 ·∫£nh v√† gi·ªØ nguy√™n kh√¥ng l·∫∑p l·∫°i n·ªØa
        // S·ª≠ d·ª•ng grid 4x3 ƒë·ªÉ tr·∫£i ƒë·ªÅu (ch·ª´a b·ªõt 1 √¥)
        const cols = 4, rows = 3;
        const cellW = 100 / cols;
        const cellH = 100 / rows;
        for (let i = 0; i < uniqueCount; i++) {
            const img = createImageElement();
            img.src = wishImages[i];
            const cx = i % cols;
            const cy = Math.floor(i / cols);
            const padX = 10 + Math.random() * 8; // 10-18% padding
            const padY = 10 + Math.random() * 8;
            const left = cx * cellW + padX;
            const top = cy * cellH + padY;
            const rotation = (Math.random() - 0.5) * 8;
            img.style.left = left + '%';
            img.style.top = top + '%';
            img.style.maxWidth = '30vw';
            img.style.maxHeight = '30vh';
            img.style.transform = `translate(-50%, -50%) rotate(${rotation}deg)`;
            img.style.setProperty('--tilt', `${rotation}deg`);
            fullscreenContainer.appendChild(img);
            requestAnimationFrame(() => {
                img.style.opacity = '1';
                img.classList.add('active');
            });
        }

        // Hi·ªÉn th·ªã banner sau 1 gi√¢y ƒë·ªÉ ng∆∞·ªùi xem k·ªãp nh√¨n
        setTimeout(() => {
            showEndingBanner();
        }, 1000);
    }

    // Kh·ªüi t·∫°o lo·∫°t ·∫£nh ƒë·∫ßu ti√™n (2 t·∫•m ngay l·∫≠p t·ª©c n·∫øu mu·ªën d√†y h∆°n)
    showImage();
    setTimeout(showImage, 200);
    
    // T·ª± ƒë·ªông th√™m ·∫£nh m·ªõi m·ªói 2.8 gi√¢y
    imagesInterval = setInterval(() => {
        showImage();
    }, 2000);
}

function showEndingBanner() {
    // G·ª° slideshow ƒë·ªÉ nh∆∞·ªùng spotlight cho banner (·∫©n m∆∞·ª£t)
    const slideshow = document.getElementById('fullscreen-images');
    if (slideshow) {
        slideshow.style.transition = 'opacity 0.8s ease';
        slideshow.style.opacity = '0.4';
    }
    // T·∫°o banner n·∫øu ch∆∞a c√≥
    let banner = document.getElementById('ending-banner');
    if (!banner) {
        banner = document.createElement('div');
        banner.id = 'ending-banner';
        banner.className = 'ending-banner';
        banner.textContent = '20 / 10 vui v·∫ª nhan em b√© üíñ ';
        document.body.appendChild(banner);
    }
    // T·∫°o th√™m sparkle tr√°i tim xung quanh banner
    const around = setInterval(() => {
        createHeartEffect(banner);
    }, 400);
    // T·ª± ƒë·ªông k·∫øt th√∫c hi·ªáu ·ª©ng sau 10s, kh√¥ng kh·ªüi ƒë·ªông l·∫°i ƒë·ªÉ tr√°nh lag
    endingTimeout = setTimeout(() => {
        clearInterval(around);
        if (slideshow) slideshow.style.opacity = '1';
        // Kh√¥ng remove banner ƒë·ªÉ ng∆∞·ªùi xem c√≥ th·ªÉ c·∫£m nh·∫≠n tr·ªçn v·∫πn
    }, 10000);
}

// ===== T·∫†O OVERLAY D·ªÑ TH∆Ø∆†NG ·ªû PH·∫¶N 3 =====
function createCuteOverlays() {
    // Vignette m·ªÅm
    if (!document.querySelector('.vignette-overlay')) {
        const v = document.createElement('div');
        v.className = 'vignette-overlay';
        document.body.appendChild(v);
    }
    // Nh√£n d√°n kawaii bay nh·∫π
    const emojis = ['üíñ','‚ú®','üå∏','üéÄ','üê∑','üíó','üíû','ü©∑','‚≠ê','üåà','üß∏'];
    // T·∫°o m·ªôt ƒë·ª£t ƒë·∫ßu
    spawnStickersBatch(18, emojis);
    // Sau ƒë√≥ c·ª© m·ªói 2s sinh th√™m v√†i sticker nh·ªè ƒë·ªÉ m√†n h√¨nh lu√¥n sinh ƒë·ªông
    if (stickersInterval) clearInterval(stickersInterval);
    stickersInterval = setInterval(() => {
        spawnStickersBatch(6, emojis);
    }, 2000);
    // T√¥ ƒëi·ªÉm glow cho ti√™u ƒë·ªÅ n·∫øu c√≥
    const typing = document.getElementById('typing-text');
    if (typing) typing.classList.add('cute-glow');
}

function spawnStickersBatch(count, emojis) {
    for (let i = 0; i < count; i++) {
        const s = document.createElement('div');
        s.className = 'kawaii-sticker';
        s.textContent = emojis[Math.floor(Math.random() * emojis.length)];
        // v·ªã tr√≠ start: ph√¢n b·ªï 3 v√πng tr√°i, ph·∫£i, v√† tr√™n
        const region = Math.random();
        let startXvw;
        if (region < 0.45) startXvw = Math.random() * 22;           // tr√°i 0-22vw
        else if (region < 0.9) startXvw = 78 + Math.random() * 22;   // ph·∫£i 78-100vw
        else startXvw = 5 + Math.random() * 90;                      // ph√≠a tr√™n ng·∫´u nhi√™n
        const startYvh = region < 0.9 ? 110 + Math.random() * 20 : -10 - Math.random() * 10;
        const driftX = (Math.random() - 0.5) * 30 + 'vw';
        const driftY = (region < 0.9 ? (-120 - Math.random() * 40) : (120 + Math.random() * 40)) + 'vh';
        const duration = 9 + Math.random() * 10;
        const delay = Math.random() * 2.5;
        s.style.left = startXvw + 'vw';
        s.style.top = startYvh + 'vh';
        s.style.setProperty('--sx', '0');
        s.style.setProperty('--sy', '0');
        s.style.setProperty('--dx', driftX);
        s.style.setProperty('--dy', driftY);
        s.style.fontSize = (16 + Math.random() * 22) + 'px';
        s.style.animationDuration = duration + 's';
        s.style.animationDelay = delay + 's';
        document.body.appendChild(s);
        setTimeout(() => s.remove(), (duration + delay) * 1000);
    }
}

function showImage(img, index) {
    img.style.display = 'block';
    img.style.opacity = '0';
    img.style.transform = 'scale(0.7) translateY(50px)';
    
    // Z-index tƒÉng d·∫ßn ƒë·ªÉ ·∫£nh m·ªõi ƒë√® l√™n ·∫£nh c≈©
    img.style.zIndex = (1000 + index).toString();
    
    // T·∫°o v·ªã tr√≠ ng·∫´u nhi√™n m·ªõi cho m·ªói l·∫ßn hi·ªÉn th·ªã
    const randomX = Math.random() * 80 + 10; // 10-90%
    const randomY = Math.random() * 80 + 10; // 10-90%
    const randomRotation = (Math.random() - 0.5) * 25; // -12.5 ƒë·∫øn +12.5 ƒë·ªô
    const randomScale = 0.8 + Math.random() * 0.6; // 0.8 ƒë·∫øn 1.4
    
    img.style.left = randomX + '%';
    img.style.top = randomY + '%';
    img.style.setProperty('--rotation', randomRotation + 'deg');
    img.style.setProperty('--scale', randomScale);
    
    // Hi·ªáu ·ª©ng fade in v·ªõi animation m∆∞·ª£t m√†
    setTimeout(() => {
        img.style.opacity = '1';
        img.style.transform = 'scale(var(--scale, 1)) translateY(0px) rotate(var(--rotation, 0deg))';
        img.classList.add('active');
    }, 150);
}

function fadeOutImage(img) {
    // B·∫Øt ƒë·∫ßu m·ªù d·∫ßn ·∫£nh c≈©
    img.style.transition = 'all 2s ease-out';
    img.style.opacity = '0.3';
    img.style.filter = 'blur(2px) brightness(0.7)';
    img.classList.remove('active');
    
    // Sau 1 gi√¢y, ti·∫øp t·ª•c m·ªù v√† thu nh·ªè
    setTimeout(() => {
        img.style.opacity = '0';
        img.style.transform = 'scale(0.5) translateY(-30px) rotate(var(--rotation, 0deg))';
        img.style.filter = 'blur(4px) brightness(0.5)';
    }, 1000);
    
    // Sau 2 gi√¢y, ·∫©n ho√†n to√†n
    setTimeout(() => {
        img.style.display = 'none';
        img.style.transform = '';
        img.style.filter = '';
        img.style.transition = '';
    }, 2000);
}

function hideImage(img) {
    img.style.opacity = '0';
    img.style.transform = 'scale(0.7) translateY(-50px) rotate(var(--rotation, 0deg))';
    img.classList.remove('active');
    
    setTimeout(() => {
        img.style.display = 'none';
    }, 1200);
}

function startFloatingHearts() {
    const heartsContainer = document.getElementById('floating-hearts-final');
    
    // T·∫°o tr√°i tim bay li√™n t·ª•c v·ªõi t·∫ßn su·∫•t cao h∆°n
    setInterval(() => {
        createFloatingHeart(heartsContainer);
    }, 400);
    
    // T·∫°o th√™m tr√°i tim bay ƒë·∫∑c bi·ªát
    for (let i = 0; i < 20; i++) {
        setTimeout(() => {
            createFloatingHeart(heartsContainer);
        }, i * 200);
    }
}

function createFloatingHeart(container) {
    const heart = document.createElement('div');
    heart.innerHTML = 'üíñ';
    heart.className = 'heart';
    
    // V·ªã tr√≠ ng·∫´u nhi√™n - t·∫°o hi·ªáu ·ª©ng ·ªü c·∫£ 2 b√™n
    const isLeftSide = Math.random() < 0.5;
    if (isLeftSide) {
        // Tr√°i tim ·ªü b√™n tr√°i
        heart.style.left = (Math.random() * 30) + '%';
    } else {
        // Tr√°i tim ·ªü b√™n ph·∫£i
        heart.style.left = (70 + Math.random() * 30) + '%';
    }
    
    heart.style.fontSize = (Math.random() * 1 + 1) + 'rem';
    heart.style.animationDuration = (Math.random() * 3 + 3) + 's';
    
    container.appendChild(heart);
    
    // X√≥a tr√°i tim sau khi animation k·∫øt th√∫c
    setTimeout(() => {
        if (heart.parentNode) {
            heart.parentNode.removeChild(heart);
        }
    }, 6000);
}

// ===== HI·ªÜU ·ª®NG TR√ÅI TIM =====

function createHeartEffect(element) {
    const rect = element.getBoundingClientRect();
    const hearts = ['üíñ', 'üíï', 'üíó', 'üíù', 'üíò'];
    
    for (let i = 0; i < 8; i++) {
        setTimeout(() => {
            const heart = document.createElement('div');
            heart.innerHTML = hearts[Math.floor(Math.random() * hearts.length)];
            heart.style.position = 'fixed';
            
            // T·∫°o hi·ªáu ·ª©ng tr√°i tim ·ªü nhi·ªÅu v·ªã tr√≠ kh√°c nhau
            if (i < 3) {
                // Tr√°i tim ·ªü gi·ªØa
                heart.style.left = (rect.left + rect.width / 2) + 'px';
                heart.style.top = (rect.top + rect.height / 2) + 'px';
            } else if (i < 5) {
                // Tr√°i tim ·ªü b√™n tr√°i
                heart.style.left = (rect.left - 50 + Math.random() * 100) + 'px';
                heart.style.top = (rect.top + rect.height / 2 + Math.random() * 50) + 'px';
            } else {
                // Tr√°i tim ·ªü b√™n ph·∫£i
                heart.style.left = (rect.right + 50 + Math.random() * 100) + 'px';
                heart.style.top = (rect.top + rect.height / 2 + Math.random() * 50) + 'px';
            }
            
            heart.style.fontSize = (1.2 + Math.random() * 0.8) + 'rem';
            heart.style.pointerEvents = 'none';
            heart.style.zIndex = '1000';
            heart.style.animation = 'heartFloat 2s ease-out forwards';
            
            document.body.appendChild(heart);
            
            // X√≥a tr√°i tim sau animation
            setTimeout(() => {
                if (heart.parentNode) {
                    heart.parentNode.removeChild(heart);
                }
            }, 2000);
        }, i * 100);
    }
}

function startHeartAnimation() {
    const heartsContainer = document.getElementById('hearts-container');
    
    if (heartsContainer) {
        heartsInterval = setInterval(() => {
            createFloatingHeart(heartsContainer);
        }, 1500);
    }
}

// ===== TH√îNG B√ÅO =====

function showNotification(message) {
    // T·∫°o th√¥ng b√°o d·ªÖ th∆∞∆°ng
    const notification = document.createElement('div');
    notification.textContent = message;
    notification.style.cssText = `
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background: linear-gradient(45deg, #4CAF50, #66BB6A);
        color: white;
        padding: 15px 25px;
        border-radius: 25px;
        font-size: 1.2rem;
        font-weight: 600;
        z-index: 10000;
        box-shadow: 0 10px 30px rgba(76, 175, 80, 0.4);
        animation: notificationPop 0.5s ease-out;
        font-family: 'Quicksand', sans-serif;
        text-align: center;
        max-width: 300px;
    `;
    
    // Th√™m animation CSS
    const style = document.createElement('style');
    style.textContent = `
        @keyframes notificationPop {
            0% { 
                opacity: 0; 
                transform: translate(-50%, -50%) scale(0.5); 
            }
            100% { 
                opacity: 1; 
                transform: translate(-50%, -50%) scale(1); 
            }
        }
    `;
    document.head.appendChild(style);
    
    document.body.appendChild(notification);
    
    // T·ª± ƒë·ªông x√≥a sau 2 gi√¢y
    setTimeout(() => {
        if (notification.parentNode) {
            notification.style.animation = 'notificationPop 0.3s ease-out reverse';
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.parentNode.removeChild(notification);
                }
            }, 300);
        }
    }, 2000);
}

// ===== NH·∫†C N·ªÄN (T√ôY CH·ªåN) =====

let musicStarted = false;
let ytPlayer = null;
let ytStarted = false;

function tryStartMusicOnce() {
    if (musicStarted) return;
    const audio = document.getElementById('background-music');
    if (!audio) return;
    audio.play().then(() => {
        musicStarted = true;
    }).catch(() => {
        // B·ªã ch·∫∑n do autoplay, s·∫Ω th·ª≠ YouTube ho·∫∑c th·ª≠ l·∫°i ·ªü l·∫ßn click sau
    });
}

function onYouTubeIframeAPIReady() {
    const holder = document.getElementById('yt-player');
    if (!holder || typeof YT === 'undefined') return;
    ytPlayer = new YT.Player('yt-player', {
        width: 1,
        height: 1,
        videoId: 'eAuv9J2R6yM',
        playerVars: {
            autoplay: 0,
            controls: 0,
            loop: 1,
            playlist: 'eAuv9J2R6yM',
            modestbranding: 1
        }
    });
}

function tryStartYouTubeOnce() {
    if (ytStarted || !ytPlayer || typeof ytPlayer.playVideo !== 'function') return;
    try {
        ytPlayer.playVideo();
        ytStarted = true;
    } catch (e) {
        // N·∫øu v·∫´n b·ªã ch·∫∑n, s·∫Ω th·ª≠ l·∫°i l·∫ßn click sau
    }
}

// ===== UTILITY FUNCTIONS =====

// H√†m ƒë·ªÉ d·ª´ng t·∫•t c·∫£ hi·ªáu ·ª©ng
function stopAllEffects() {
    if (heartsInterval) {
        clearInterval(heartsInterval);
    }
    if (imagesInterval) {
        clearInterval(imagesInterval);
    }
}

// H√†m ƒë·ªÉ thay ƒë·ªïi h√¨nh ·∫£nh (ƒë·ªÉ b·∫°n c√≥ th·ªÉ t√πy ch·ªânh)
function updateImages(newImages) {
    images.length = 0;
    images.push(...newImages);
}

// H√†m ƒë·ªÉ thay ƒë·ªïi c√¢u h·ªèi √¢m nh·∫°c (ƒë·ªÉ b·∫°n c√≥ th·ªÉ t√πy ch·ªânh)
function updateMusicQuestions(newQuestions) {
    musicQuestions.length = 0;
    musicQuestions.push(...newQuestions);
}

// ===== X·ª¨ L√ù L·ªñI =====

// X·ª≠ l√Ω l·ªói khi kh√¥ng t·∫£i ƒë∆∞·ª£c h√¨nh ·∫£nh
document.addEventListener('error', function(e) {
    if (e.target.tagName === 'IMG') {
        console.log('Kh√¥ng th·ªÉ t·∫£i h√¨nh ·∫£nh:', e.target.src);
        e.target.style.display = 'none';
    }
}, true);

// ===== RESPONSIVE HANDLING =====

// X·ª≠ l√Ω thay ƒë·ªïi k√≠ch th∆∞·ªõc m√†n h√¨nh
window.addEventListener('resize', function() {
    // C√≥ th·ªÉ th√™m logic x·ª≠ l√Ω responsive ·ªü ƒë√¢y
    console.log('K√≠ch th∆∞·ªõc m√†n h√¨nh ƒë√£ thay ƒë·ªïi');
});

// ===== EXPORT CHO VI·ªÜC T√ôY CH·ªàNH =====

// C√°c h√†m n√†y c√≥ th·ªÉ ƒë∆∞·ª£c g·ªçi t·ª´ console ƒë·ªÉ t√πy ch·ªânh
window.customizeWebsite = {
    updateImages: updateImages,
    updateMusicQuestions: updateMusicQuestions,
    stopAllEffects: stopAllEffects
};

console.log('Website ƒë√£ s·∫µn s√†ng! B·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng window.customizeWebsite ƒë·ªÉ t√πy ch·ªânh.');